{"ast":null,"code":"import _slicedToArray from\"/Users/karina/Desktop/projects/pin-it/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import Context from\"./auth\";import{useCookies}from\"react-cookie\";var AuthContextWrapper=function AuthContextWrapper(props){var _useCookies=useCookies([\"token\"]),_useCookies2=_slicedToArray(_useCookies,2),cookies=_useCookies2[0],setCookie=_useCookies2[1];var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var loginFunction=function loginFunction(email,password){setLoading(true);console.log(email,password);setTimeout(function(){fetch(\"/login\",{method:\"POST\",headers:{\"Content-type\":\"application/json\",\"Accept\":\"application/json\"},body:JSON.stringify({email:email,password:password})}).then(function(r){return r.json();}).then(function(res){console.log(\"res?: \",res);if(res.token!==''){console.log('user found...');setCookie(\"token\",res.token);setError(\"\");// setToken(res.token)\n// localStorage.token = res.token\n}else{setError(\"Wrong credentials\");}});setLoading(false);},1000);};return React.createElement(Context.Provider,{value:{token:cookies.token,error:error,loading:loading,login:loginFunction}},props.children);};export default AuthContextWrapper;","map":{"version":3,"sources":["/Users/karina/Desktop/projects/pin-it/client/src/context/Auth/index.js"],"names":["React","useState","Context","useCookies","AuthContextWrapper","props","cookies","setCookie","loading","setLoading","error","setError","loginFunction","email","password","console","log","setTimeout","fetch","method","headers","body","JSON","stringify","then","r","json","res","token","login","children"],"mappings":"+HAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAOC,CAAAA,OAAP,KAAoB,QAApB,CACA,OAASC,UAAT,KAA2B,cAA3B,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,KAAK,CAAI,iBACLF,UAAU,CAAC,CAAC,OAAD,CAAD,CADL,4CAC3BG,OAD2B,iBAClBC,SADkB,+BAGJN,QAAQ,CAAC,KAAD,CAHJ,wCAG3BO,OAH2B,eAGlBC,UAHkB,8BAIRR,QAAQ,CAAC,EAAD,CAJA,yCAI3BS,KAJ2B,eAIpBC,QAJoB,eAMlC,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAAQC,QAAR,CAAqB,CACzCL,UAAU,CAAC,IAAD,CAAV,CAEAM,OAAO,CAACC,GAAR,CAAYH,KAAZ,CAAmBC,QAAnB,EACAG,UAAU,CAAC,UAAM,CACfC,KAAK,CAAC,QAAD,CAAW,CACdC,MAAM,CAAE,MADM,CAEdC,OAAO,CAAE,CACP,eAAgB,kBADT,CAEP,SAAU,kBAFH,CAFK,CAMdC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CAAEV,KAAK,CAALA,KAAF,CAASC,QAAQ,CAARA,QAAT,CAAf,CANQ,CAAX,CAAL,CAQCU,IARD,CAQM,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,IAAF,EAAJ,EARP,EASCF,IATD,CASM,SAAAG,GAAG,CAAI,CACXZ,OAAO,CAACC,GAAR,CAAY,QAAZ,CAAsBW,GAAtB,EACA,GAAGA,GAAG,CAACC,KAAJ,GAAc,EAAjB,CAAqB,CACnBb,OAAO,CAACC,GAAR,CAAY,eAAZ,EACAT,SAAS,CAAC,OAAD,CAAUoB,GAAG,CAACC,KAAd,CAAT,CACAjB,QAAQ,CAAC,EAAD,CAAR,CACA;AACA;AACD,CAND,IAMO,CACLA,QAAQ,CAAC,mBAAD,CAAR,CACD,CACF,CApBD,EAqBAF,UAAU,CAAC,KAAD,CAAV,CACD,CAvBS,CAuBP,IAvBO,CAAV,CAwBD,CA5BD,CA8BA,MACE,qBAAC,OAAD,CAAS,QAAT,EACE,KAAK,CAAE,CACLmB,KAAK,CAAEtB,OAAO,CAACsB,KADV,CAELlB,KAAK,CAALA,KAFK,CAGLF,OAAO,CAAPA,OAHK,CAILqB,KAAK,CAAEjB,aAJF,CADT,EAQGP,KAAK,CAACyB,QART,CADF,CAYD,CAhDD,CAkDA,cAAe1B,CAAAA,kBAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Context from \"./auth\";\nimport { useCookies } from \"react-cookie\";\n\nconst AuthContextWrapper = props => {\n  const [cookies, setCookie] = useCookies([\"token\"]);\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const loginFunction = (email, password) => {\n    setLoading(true);\n\n    console.log(email, password);\n    setTimeout(() => {\n      fetch(\"/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({ email, password })\n      })\n      .then(r => r.json())\n      .then(res => {\n        console.log(\"res?: \", res)\n        if(res.token !== '') {\n          console.log('user found...')\n          setCookie(\"token\", res.token);\n          setError(\"\");\n          // setToken(res.token)\n          // localStorage.token = res.token\n        } else {\n          setError(\"Wrong credentials\");\n        }\n      })\n      setLoading(false);\n    }, 1000)\n  }\n\n  return (\n    <Context.Provider\n      value={{\n        token: cookies.token,\n        error,\n        loading,\n        login: loginFunction\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport default AuthContextWrapper;\n"]},"metadata":{},"sourceType":"module"}